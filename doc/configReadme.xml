<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Salesforce Lead Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to migrate Leads from one Salesforce organization to another one.

This Anypoint template serves as a foundation for the process of migrating leads from one Salesforce instance to another, being able to specify filtering criteria and desired behavior when a lead already exists in the destination org. 

As implemented, this template leverages the Mule batch module.

The batch job is divided in *Process* and *On Complete* stages.

Migration process starts from fetching all the existing Leads that match the filter criteria from Salesforce Org A.
On *Process* stage matched leads will be grouped and inserted or updated in Salesforce Org B.

Finally during the *On Complete* stage the template will both output statistics data into the console and send a notification email with the results of the batch execution.
		</section>
		<section id="considerations">

To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for the template to run smoothly. 
**Failing to do so could lead to unexpected behavior of the template.**

		</section>
		<section id="running_on_cloudhub">

Once your app is all set and started, supposing you choose as domain name `sfdcleadsync` to trigger the use case you just need to browse to `http://sfdcleadsync.cloudhub.io/syncleads` and report will be sent to the e-mails configured.

		</section>
		<section id="running_on_standalone">

Once your app is all set and started, there is no need to do anything else. The application will poll Salesforce to know if there are any newly created or updated objects and synchronize them.

		</section>
		<section id="application_configuration">
		
**Application Configuration**
+ http.port `9090` 

**Batch Aggregator Configuration**
+ page.size `1000`

**Salesforce Connector configuration for company A**
+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Salesforce Connector configuration for company B**
+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`

**SMTP Services Configuration**
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `developer%40mulesoft.com`
+ smtp.password `PASSWORD`

**Email Details**
+ mail.from `batch.lead.migration%40mulesoft.com`
+ mail.to `your.email@gmail.com`
+ mail.subject `Batch Job Finished Report`

		</section>
		<section id="api_calls">
		
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The template calls to the API can be calculated using the formula:

***1 + X + X / ${page.size}***

Being ***X*** the number of Leads to be synchronized on each run. 

The division by ***${page.size}*** is because, by default, Leads are gathered in groups of ${page.size} for each Upsert API Call in the commit step.

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).

		</section>
		<section id="default_endpoints_xml">
		
This file provides the inbound and outbound sides of your integration app.
This template has only an [HTTP Inbound Endpoint](http://www.mulesoft.org/documentation/display/current/HTTP+Endpoint+Reference) as the way to trigger the use case.

###  Inbound Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `syncleads` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.
+ The endpoint is configured as a *request-response* since as a result of calling it the response will be the total of Leads migrated and filtered by the criteria specified.

		</section>
		<section id="default_business_logic_xml">
		
Functional aspect of the template is implemented on this XML, directed by one flow responsible of executing the logic.
For the purpose of this particular Template the *mainFlow* uses a batch job, which handles all the logic of it.

		</section>
	</sections>
</configuration>